!function(){"use strict";var t=t||Object.getPrototypeOf(customElements.get("home-assistant-main"));const{html:i,css:e}=t.prototype,s={entities:[],auto:"_latest_release",title:"Github repositories",name:"{path}",secondary_info:"{latest_release_tag|conditional()}",url:!0,attribute_urls:!0,sort:["stars","issues"],attributes:["stars","issues","pull_requests","forks","watchers"]};let n={};const o=(t,i)=>{if(n[t]){if(i)throw new Error(t)}else if(console.error("[github-flexi-card] "+t),n[t]=1,i)throw new Error(t)},r=(...t)=>t.reduce(((t,i)=>void 0!==t?t:i)),a=t=>Array.isArray(t)?t:void 0!==t?[t]:[],c=(t,i)=>a(t).map((t=>l(t,i))),l=(t,i)=>{switch(typeof t){case"string":const e={};return e[i]=t,e;case"object":return Object.assign({},t)}return t};const h=(t,i,e)=>isNaN(t)?1:isNaN(i)?-1:e?t-i:i-t,u=t=>i`<div class="card-header"><div class="truncate">${t}</div></div>`,d=(t,i)=>{const e=l(t,"entity");return e.attributes=r(e.attributes,i.attributes),e.attribute_urls=r(e.attribute_urls,i.attribute_urls),e.attribute_color=r(e.attribute_color,i.attribute_color),e.icon=r(e.icon,i.icon),e.icon_color=r(e.icon_color,i.icon_color),e.name=r(e.name,i.name),e.secondary_info=r(e.secondary_info,i.secondary_info),e.url=r(e.url,i.url),e.compact_view=r(e.compact_view,i.compact_view,!0),e};class p{constructor(t){this.onMatch=t}process(t){return void 0===t||""===t?t:t.replace(/\{([^\}]+)\}/g,((t,i)=>this.replaceKeyword(i,t)))}replaceKeyword(t,i){const e=t.split("|"),s=e.shift(),n=void 0===s?void 0:this.onMatch(s),o=e.map((t=>{const i=f.exec(t);if(i&&i.groups&&g[i.groups.func])return g[i.groups.func](i.groups.params)})).filter((t=>void 0!==t)).reduce(((t,i)=>i(t)),n);return void 0===o?i:o}}const f=/(?<func>[a-z]+)\((?<params>[^\)]*)\)/,g={replace:t=>{const i=t.split(",");if(2==i.length)return t=>void 0!==t?t.replace(i[0],i[1]):void 0;o("'replace' function param has to have two parameters")},round:t=>{let i=parseInt(t);return isNaN(i)&&(i=0),t=>void 0!==t?parseFloat(t).toFixed(i):void 0},conditional:t=>t=>void 0!==t?t:""};const m=["forks","issues","latest_commit","latest_issue","latest_pull_request","latest_release","pull_requests","stars","watchers"];const y=t=>i`<div class="state${t.action?" clickable":""}" @click="${t.action}" title="${t.tooltip}">${t.label&&i`<div class="label" style="color:${t.color}">${t.label}</div>`} ${t.icon&&!t.label?i`<ha-icon icon="${t.icon}" style="color:${t.color}"></ha-icon>`:null}<div>${t.value}</div></div>`,v={forks:"mdi:source-fork",issues:"mdi:alert-circle-outline",pull_requests:"mdi:source-pull",stars:"mdi:star",latest_release:"mdi:tag-outline",watchers:"mdi:glasses"},b={forks:"network/members",issues:"issues",pull_requests:"pulls",stars:"stargazers",latest_release:"releases",watchers:"watchers",home:""},w=(t,i,e,s)=>{switch(typeof i){case"boolean":if(!i)return;return e?void 0===!b[t]?void o(`Sorry url cannot be built for "${t}"`):()=>window.open(`https://github.com/${e}/${b[t]}`):void o("Cannot build url - entity path attribute is missing");case"string":return()=>window.open(s.process(i));case"undefined":break;default:o("Unsupported url type: "+typeof i)}},_=t=>t.substr(0,1).toUpperCase()+t.substr(1).replace(/_/g," "),x=t=>{const i=m.find((i=>t.endsWith(i)));return void 0!==i?t.replace("_"+i,""):t};customElements.define("github-entity",class extends t{constructor(){super(...arguments),this.icon="mdi:github",this.iconColor="var(--paper-item-icon-color)",this.name="",this.attributesData=[],this.compact_view=!0}static get styles(){return e([":host {\n    --attribute-icon-size: 20px;\n    line-height: var(--paper-font-body1_-_line-height);\n}\n\n.truncate {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n}\n\n.clickable {\n    cursor: pointer;\n}\n\n.entity-spacing:first-child {\n    margin-top: 0;\n}\n.entity-spacing:last-child {\n    margin-bottom: 0;\n}\n\n.entity-row {\n    display: flex;\n    align-items: center;\n}\n.entity-row .name {\n    flex: 1;\n    margin: 0 6px;\n}\n.entity-row .secondary {\n    color: var(--secondary-text-color);\n}\n.entity-row .icon {\n    flex: 0 0 40px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 50%;\n    text-align: center;\n    height: 40px;\n    margin-right: 10px;\n}\n\n.compact-view .state {\n    --mdc-icon-size: var(--attribute-icon-size);\n    font-size: var(--paper-font-caption_-_font-size);\n}\n.state {\n    display: flex;\n    margin-left: 7px;\n}\n.state > * {\n    margin-left:5px;\n}\n.state > *:first-child {\n    margin-left: 0;\n}\n.state > div {\n    line-height: 24px;\n}\n\n.compact-view .state {\n    flex-direction: column;\n    align-items: center;\n    margin-left: 10px;\n}\n.compact-view .state > div {\n    line-height: normal;\n}\n.compact-view .state > .label {\n    margin-top: 1px; /* fix for small misalignment if you have icon next to label */\n    color: var(--primary-color);\n    line-height: var(--attribute-icon-size);\n}\n\n.compact-view .state > * {\n    margin: 0;\n}"])}static get properties(){return{icon:{type:String},iconColor:{type:String},name:{type:String},secondaryInfo:{type:String},attributesData:{type:Array},action:{type:Function},compact_view:{type:Boolean}}}set hass(t){this.config&&(this._hass=t,this.config&&this.processHassUpdate())}setConfig(t){const i=JSON.stringify(this.config),e=JSON.stringify(t);i!=e&&(n={},t.entity?(this.entityId=t.entity,this.config=JSON.parse(e),this.entityPrefix=x(this.config.entity),this.name=t.name||t.entity,t.icon&&(this.icon=t.icon),t.icon_color&&(this.iconColor=t.icon_color),t.secondary_info&&(this.secondaryInfo=t.secondary_info),this.compact_view=r(t.compact_view,!0),this._hass&&this.processHassUpdate()):o("Missing 'entity' property in entity configuration"))}render(){return i`<div class="entity-row${this.compact_view?" compact-view":""}"><div class="icon"><ha-icon icon="${this.icon}" style="color:${this.iconColor}"></ha-icon></div><div class="name truncate${this.action?" clickable":""}" @click="${this.action}">${this.name} ${this.secondaryInfo&&i`<div class="secondary truncate">${this.secondaryInfo}</div>`}</div>${this.attributesData.map(y)}<div></div></div>`}getRepoInfo(t){switch(t){case"path":return this.repoPath;case"owner":return this.repoPath.split("/")[0];case"repo":return this.repoPath.split("/")[1]}const i=m.find((i=>t.startsWith(i)));void 0===i&&o("Unsupported property: "+t,!0);const e=this._hass.states[this.entityPrefix+"_"+i];if(e)return i==t?e.state:e.attributes[t.substr(i.length+1)];o("Entity not found: "+this.entityPrefix+"_"+i)}processHassUpdate(){const t=this._hass.states[this.config.entity];t||o("[processHassUpdate] Entity not found: "+this.config.entity,!0);const i=t.attributes.friendly_name;this.repoPath=i.substr(0,i.indexOf(" "));const e=new p((t=>this.getRepoInfo(t)));this.name=e.process(this.config.name)||this.repoPath,this.icon=this.config.icon||t.attributes.icon,this.config.secondary_info&&(this.secondaryInfo=e.process(this.config.secondary_info));const s=this.getAttributesViewData(e);JSON.stringify(s)!=JSON.stringify(this.attributesData)&&(this.attributesData=s),this.url!=this.config.url&&(this.url=this.config.url,this.action=w("home",this.url,this.repoPath,e))}getAttributesViewData(t){return c(this.config.attributes,"name").map((i=>{const e=this.getRepoInfo(i.name);return{value:void 0===e?"?":e,tooltip:_(i.name),icon:i.icon||v[i.name],label:i.label&&t.process(i.label),color:i.color||this.config.attribute_color||"var(--primary-color)",action:w(i.name,void 0!==i.url?i.url:this.config.attribute_urls,this.repoPath,t)}}))}}),customElements.define("github-flexi-card",class extends t{constructor(){super(...arguments),this.entities=[],this.cardSize=0,this.order=[]}static get styles(){return e(["\n.truncate {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n}\n\n.card-content > div {\n    margin-bottom: 8px;\n}\n.card-content > div:last-child {\n    margin-bottom: 0;\n}"])}static get properties(){return{cardTitle:{type:String},entities:{type:Array},order:{type:Array}}}set hass(t){if(this.config.auto){const i=this.entities.map((t=>t.entityId));Object.keys(t.states).filter((t=>t.endsWith(this.config.auto))).forEach((t=>{i.includes(t)||this.entities.push(this.getNewInitializedEntity(t))})),this.config.auto=!1}if(this.entities.forEach((i=>i.hass=t)),this.sortOptions&&this.sortOptions.length){const t=this.sortOptions.map((t=>t.by)),i=this.entities.map((i=>t.map((t=>Number(i.getRepoInfo(t)))))),e=this.entities.map(((t,i)=>i)).sort(((t,e)=>i[t].reduce(((t,s,n)=>0!=t?t:h(s,i[e][n],this.sortOptions[n].ascending)),0)));this.order.some(((t,i)=>t!=e[i]))&&(this.order=e)}}setConfig(t){var i;t=Object.assign(Object.assign({},s),t),this.cardTitle=t.title;const e=null===(i=this.config)||void 0===i?void 0:i.entities;this.config=t,this.cardSize=0,this.cardTitle&&this.cardSize++;const n=c(t.entities,"entity");e!=t.entities?(this.order=[],this.entities=n.map((t=>this.getNewInitializedEntity(t)))):this.entities.forEach(((i,e)=>{const s=d(n[e]||i.entityId,t);i.setConfig(s)}));const o=a(t.sort).map((t=>l(t,"by")));this.sortOptions=o}getNewInitializedEntity(t){const i=d(t,this.config);this.order.push(this.order.length);const e=document.createElement("github-entity");return e.setConfig(i),this.cardSize++,e}getCardSize(){return this.cardSize}render(){return i`<ha-card>${this.cardTitle&&u(this.cardTitle)}<div class="card-content">${this.order.map((t=>i`<div>${this.entities[t]}</div>`))}</div></ha-card>`}}),console.info("%c GITHUB-FLEXI-CARD %c 2.0.0","color: white; background: #cca900; font-weight: 700;","color: #cca900; background: white; font-weight: 700;"),window.customCards=window.customCards||[],window.customCards.push({type:"github-flexi-card",name:"Github flexi card",preview:!0,description:"Customizable card for github integration"})}();
//# sourceMappingURL=github-flexi-card.js.map
